<?php

namespace MERCADO\MSBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * @ORM\Entity(repositoryClass="MERCADO\MSBundle\Entity\SubCategoriaRepository")
 * @ORM\Table(name="subcategoria") 
 *  * @UniqueEntity(
 * 		fields = {"descripcion"},
 *                      errorPath ="descripcion",
 *                      message="Ya existe una Sub Categoria con el mismo nombre."
 * 		)

 */
class SubCategoria {

    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\ManyToOne(targetEntity="Categoria", inversedBy="subcategorias")
     * @ORM\JoinColumn(name="categoria_id", referencedColumnName="id")
     */
    protected $categoria;  
    /**
     * @ORM\Column(type="string", length=50)
     */
    protected $descripcion;
    
    /**
     * @ORM\Column(type="string", length=30,nullable=true)
     */
    protected $sinonimo;
    
    /**
     * @ORM\OneToMany(targetEntity="Publicacion", mappedBy="subcategoria")
     */
    protected $publicaciones;
    /**
     * @ORM\Column(type="boolean", nullable=false, options={"default"=1})
     */
    protected $activo=true;
    

    /*     * ********************************
     * __construct
     *
     * 
     * ******************************** */

    public function __construct() {
        $this->publicaciones = new ArrayCollection();
    }

    /*     * ********************************
     * __toString()
     *
     * Este mÃ©todo sirve para poder popular los comboboxes en los forms.
     * ******************************* */

    public function __toString() {
        return $this->getDescripcion();
    }
    

    

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set descripcion
     *
     * @param string $descripcion
     * @return SubCategoria
     */
    public function setDescripcion($descripcion)
    {
        $this->descripcion = $descripcion;
    
        return $this;
    }

    /**
     * Get descripcion
     *
     * @return string 
     */
    public function getDescripcion()
    {
        return $this->descripcion;
    }

    /**
     * Set categoria
     *
     * @param \MERCADO\MSBundle\Entity\Categoria $categoria
     * @return SubCategoria
     */
    public function setCategoria(\MERCADO\MSBundle\Entity\Categoria $categoria = null)
    {
        $this->categoria = $categoria;
    
        return $this;
    }

    /**
     * Get categoria
     *
     * @return \MERCADO\MSBundle\Entity\Categoria 
     */
    public function getCategoria()
    {
        return $this->categoria;
    }

    /**
     * Add publicacions
     *
     * @param \MERCADO\MSBundle\Entity\Publicacion $publicacions
     * @return SubCategoria
     */
    public function addPublicacion(\MERCADO\MSBundle\Entity\Publicacion $publicacions)
    {
        $this->publicacions[] = $publicacions;
    
        return $this;
    }

    /**
     * Remove publicacions
     *
     * @param \MERCADO\MSBundle\Entity\Publicacion $publicacions
     */
    public function removePublicacion(\MERCADO\MSBundle\Entity\Publicacion $publicacions)
    {
        $this->publicacions->removeElement($publicacions);
    }

    /**
     * Get publicacions
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getPublicacions()
    {
        return $this->publicacions;
    }

    /**
     * Set activo
     *
     * @param boolean $activo
     * @return SubCategoria
     */
    public function setActivo($activo)
    {
        $this->activo = $activo;
    
        return $this;
    }

    /**
     * Get activo
     *
     * @return boolean 
     */
    public function getActivo()
    {
        return $this->activo;
    }

    /**
     * Set sinonimo
     *
     * @param string $sinonimo
     * @return SubCategoria
     */
    public function setSinonimo($sinonimo)
    {
        $this->sinonimo = $sinonimo;
    
        return $this;
    }

    /**
     * Get sinonimo
     *
     * @return string 
     */
    public function getSinonimo()
    {
        return $this->sinonimo;
    }
}